name: Build Spinning Tech Stack SVG

on:
  workflow_dispatch:           # bisa run manual
  schedule:
    - cron: "0 2 * * *"        # opsional: rebuild tiap hari 02:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate spinning SVG
        run: |
          mkdir -p assets

          cat > build.js <<'NODE'
          import fs from 'fs';
          import https from 'https';

          // ==== EDIT daftar ikon sesuai kebutuhan ====
          const icons = [
            "html","css","js","ts","react","nextjs","vite","tailwind","bootstrap",
            "php","laravel","nodejs","express",
            "mysql","postgres","mongodb","redis",
            "docker","nginx","linux","bash",
            "git","github","postman","vscode","vercel","netlify","cloudflare"
          ];
          // ===========================================

          const fetchIcon = (name) => new Promise((resolve, reject) => {
            const url = `https://skillicons.dev/icons?i=${name}`;
            https.get(url, res => {
              const chunks = [];
              res.on('data', d => chunks.push(d));
              res.on('end', () => {
                if (res.statusCode === 200) resolve(Buffer.concat(chunks));
                else reject(new Error(`HTTP ${res.statusCode} for ${name}`));
              });
            }).on('error', reject);
          });

          const polar = (cx, cy, r, angleDeg) => {
            const a = (angleDeg * Math.PI) / 180;
            return [cx + r * Math.cos(a), cy + r * Math.sin(a)];
          };

          (async () => {
            const bufs = await Promise.all(icons.map(fetchIcon));
            const dataUris = bufs.map(b => `data:image/png;base64,${b.toString('base64')}`);

            const W = 740, H = 420;
            const cx = W/2, cy = H/2;

            const outer = { n: Math.min(16, dataUris.length), r: 150, size: 44 };
            const inner = { n: Math.min(dataUris.length - outer.n, 12), r: 95, size: 40 };

            const outerIcons = dataUris.slice(0, outer.n);
            const innerIcons = dataUris.slice(outer.n, outer.n + inner.n);

            const placeRing = (arr, r, size, startAngle = -90) => {
              const step = 360 / arr.length;
              return arr.map((href, i) => {
                const angle = startAngle + i * step;
                const [x, y] = polar(cx, cy, r, angle);
                const xImg = x - size/2;
                const yImg = y - size/2;
                return `<image href="${href}" x="${xImg.toFixed(1)}" y="${yImg.toFixed(1)}" width="${size}" height="${size}" />`;
              }).join('\n');
            };

            const outerImages = placeRing(outerIcons, outer.r, outer.size);
            const innerImages = placeRing(innerIcons, inner.r, inner.size, -90 + 15);

            const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${W}" height="${H}" viewBox="0 0 ${W} ${H}" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Spinning Tech Stack">
  <title>Spinning Tech Stack</title>
  <desc>Ikon stack berputar membentuk cincin</desc>

  <rect x="0" y="0" width="${W}" height="${H}" rx="16" ry="16" fill="#0d1117" opacity="0.7"/>
  <g filter="url(#glow)">
    <rect x="1" y="1" width="${W-2}" height="${H-2}" rx="15" ry="15" fill="none" stroke="#30363d" stroke-width="1"/>
  </g>

  <defs>
    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="0" stdDeviation="2" flood-color="#ffffff" flood-opacity="0.06"/>
    </filter>
  </defs>

  <g transform="rotate(0 ${cx} ${cy})">
    ${outerImages}
    <animateTransform attributeName="transform" type="rotate" from="0 ${cx} ${cy}" to="360 ${cx} ${cy}" dur="28s" repeatCount="indefinite"/>
  </g>

  <g transform="rotate(0 ${cx} ${cy})">
    ${innerImages}
    <animateTransform attributeName="transform" type="rotate" from="0 ${cx} ${cy}" to="-360 ${cx} ${cy}" dur="20s" repeatCount="indefinite"/>
  </g>
</svg>`;

            fs.writeFileSync('assets/techstack-spin.svg', svg, 'utf8');
            console.log('Generated assets/techstack-spin.svg');
          })().catch(err => { console.error(err); process.exit(1); });
          NODE

          node build.js

      - name: Commit SVG
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/techstack-spin.svg
          git commit -m "build: update spinning tech stack svg" || echo "No changes"
          git push
